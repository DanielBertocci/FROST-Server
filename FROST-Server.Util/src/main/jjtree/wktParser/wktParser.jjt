/*
 * Copyright (C) 2016 Fraunhofer Institut IOSB, Fraunhoferstr. 1, D 76131
 * Karlsruhe, Germany.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

options {
  MULTI = true;
  VISITOR = true;
  NODE_DEFAULT_VOID = true;
  STATIC = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(Parser)

package de.fraunhofer.iosb.ilt.frostserver.util.wktparser;

/** A SensorThingsAPI query Grammar. */
public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN [IGNORE_CASE]:
{
  <LB: "(" >
| <RB: ")" >
| <COMMA: "," >
| <DOUBLE: ( <SIGN> )? ( (["0"-"9"])+ ("."(["0"-"9"])*)?) | ( "."(["0"-"9"])+ ) (["E"]("-")?(["0"-"9"])+)? >
| <#SIGN: ["+", "-"]>
| <ZoM: "Z" | "M">
| <ZaM: "ZM">
| <POINT:              "POINT" >
| <MULTIPOINT:         "MULTIPOINT" >
| <LINESTRING:         "LINESTRING" >
| <MULTILINESTRING:    "MULTILINESTRING" >
| <POLYGON:            "POLYGON" >
| <MULTIPOLYGON:       "MULTIPOLYGON" >
| <TRIANGLE:           "TRIANGLE" >
| <TIN:                "TIN" >
| <POLYHEDRALSURFACE:  "POLYHEDRALSURFACE" >
| <GEOMETRYCOLLECTION: "GEOMETRYCOLLECTION" >
}

/** Main production. */
ASTStart Start() #Start : {}
{
  ( PointWithData()
  | MultiPointWithData()
  | LineStringWithData()
  | PolygonWithData()
  ) <EOF>
  { return jjtThis; }
}


void PointWithData() #WktPoint : {}
{
  <POINT>  
  ( <ZoM> <LB> Coords3() <RB>
  |       <LB> Coords2() <RB>
  ) 
}

void MultiPointWithData() #WktMultiPoint : {}
{
  <MULTIPOINT> 
  ( <ZoM> <LB> <LB> Coords3() <RB> (<COMMA> <LB> Coords3() <RB>)* <RB>
  |       <LB> <LB> Coords2() <RB> (<COMMA> <LB> Coords2() <RB>)* <RB>
  )
}

void LineStringWithData() #WktLineString : {}
{
  <LINESTRING> 
  ( <ZoM> <LB> Coords3List() <RB>
  |       <LB> Coords2List() <RB>
  )
}

void PolygonWithData() #WktPolygon : {}
{
  <POLYGON> 
  ( <ZoM> <LB> LinearRing3() ( <COMMA> LinearRing3() )* <RB>
  |       <LB> LinearRing2() ( <COMMA> LinearRing2() )* <RB>
  )
}


void LinearRing2() #LinearRing : {}
{
  <LB> Coords2List() <RB>
}

void LinearRing3() #LinearRing : {}
{
  <LB> Coords3List() <RB>
}

void Coords2() #Coords2 : {}
{
  Number() Number()
}
void Coords3() #Coords3 : {}
{
  Number() Number() Number()
}

void Coords2List():{}
{
  Coords2() ( <COMMA> Coords2() )*
}
void Coords3List():{}
{
  Coords3() ( <COMMA> Coords3() )*
}

void Number() #Number : {Token t;}
{
  t=<DOUBLE>
  {
    jjtThis.jjtSetValue(Double.valueOf(t.image));
  }
}
